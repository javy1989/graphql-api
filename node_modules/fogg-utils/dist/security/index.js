"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encrypt = encrypt;
exports.getBase64 = getBase64;
exports.setBase64 = setBase64;
exports.getRandomCode = getRandomCode;

var _crypto = _interopRequireDefault(require("crypto"));

var _is = require("../is");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Dependencies
// Utils
function encrypt(str) {
  return _crypto["default"].createHash('sha1').update(str.toString()).digest('hex');
}

function getBase64(value) {
  var buffer = false;

  if ((0, _is.isString)(value)) {
    buffer = Buffer.from(value, 'base64').toString('ascii');
  }

  if ((0, _is.isJson)(buffer)) {
    buffer = JSON.parse(Buffer.from(value, 'base64').toString('ascii'));
  }

  return buffer;
}

function setBase64(value) {
  if ((0, _is.isObject)(value)) {
    return Buffer.from(JSON.stringify(value)).toString('base64');
  } else if ((0, _is.isString)(value)) {
    return Buffer.from(value).toString('base64');
  }

  return false;
}

function getRandomCode(max) {
  var code = '';
  var randomPoz;
  var charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  max = max || 12;

  for (var i = 0; i < max; i += 1) {
    randomPoz = Math.floor(Math.random() * charset.length);
    code += charset.substring(randomPoz, randomPoz + 1);
  }

  return code;
}