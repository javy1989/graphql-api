"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slugFn = slugFn;
exports.cx = cx;
exports.redirectTo = redirectTo;
exports.isFirstRender = isFirstRender;
exports.getModuleInfo = getModuleInfo;

var _slug = _interopRequireDefault(require("slug"));

var _is = require("../is");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function slugFn() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return (0, _slug["default"])(str, {
    lower: true
  });
}

function cx() {
  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
    classes[_key] = arguments[_key];
  }

  return classes.join(' ').trim();
}

function redirectTo() {
  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';

  if ((0, _is.isBrowser)()) {
    window.location.href = url;
  }

  return false;
}

function isFirstRender(items) {
  return !(0, _is.isDefined)(items) || items.length === 0 || Object.keys(items).length === 0;
}

function getModuleInfo(_ref) {
  var asPath = _ref.asPath;
  var cleanPath = asPath.split('?')[0];

  if (cleanPath.substr(-1) === '/') {
    cleanPath = cleanPath.slice(0, -1);
  }

  var _cleanPath$split = cleanPath.split('/'),
      _cleanPath$split2 = _slicedToArray(_cleanPath$split, 5),
      section = _cleanPath$split2[1],
      _cleanPath$split2$ = _cleanPath$split2[2],
      module = _cleanPath$split2$ === void 0 ? 'home' : _cleanPath$split2$,
      action = _cleanPath$split2[3],
      id = _cleanPath$split2[4];

  return {
    section: section,
    module: module,
    action: action,
    id: id
  };
}